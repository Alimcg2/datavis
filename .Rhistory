order.sort.page <- '?sort=created?order=desc?per_page=100' #orders, sorts and sets max number of pages
repo.search <- paste0(user.repo.url, order.sort.page, access) #combines all parts of url
repo.data <- fromJSON(repo.search)
flat.repo <- flatten(repo.data) #flattening the data
num_repos <- nrow(repo.data) #getting the number of rows (20), equal to the number of repos
most.popular <- flat.repo %>%
filter(forks_count == which.max(forks_count)) %>%
summarise(name = name) #gets the name in a data frame of the most popular
---
output: html_document
---
```{r, echo = FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
# Quereying Data
git.user <- 'alimcg2' #finding the user verekia
base <- "https://api.github.com/" #base for all searches
search.user <- 'users/' #search for user
access <- '?access_token=259780c8151713b72726b60fd10a1bcdb8239987' #access token
user.search <- paste0(base, search.user, git.user) #search url
user.data <- fromJSON(user.search) #conduct search
user.repo.url <- user.data$repos_url #gets repo url
order.sort.page <- '?sort=created?order=desc?per_page=100' #orders, sorts and sets max number of pages
repo.search <- paste0(user.repo.url, order.sort.page, access) #combines all parts of url
repo.data <- fromJSON(repo.search)
flat.repo <- flatten(repo.data) #flattening the data
num_repos <- nrow(repo.data) #getting the number of rows (20), equal to the number of repos
most.popular <- flat.repo %>%
filter(forks_count == max(forks_count)) %>%
summarise(name = name) #gets the name in a data frame of the most popular
most_popular <- (most.popular[1,1]) #gets the name out of the data frame = 'initializr-template'
image <- user.data$avatar_url
num.pop.forks <- max(flat.repo$forks_count)
```
# `r git.user`
![](`r image` "`r git.user`")
#### `r git.user` has `r num_repos` repositories. Of those `r num_repos` repositories, `r most_popular` is their most popular. Their most popular repository, `r most_popular`, has had `r num.pop.forks` forks.
```{r, echo = FALSE, message=FALSE}
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = description, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
summary <- kable(summary.data)
```
`r table.data`
`r summary`
---
output: html_document
---
```{r, echo = FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
# Quereying Data
git.user <- 'verekia' #finding the user verekia
base <- "https://api.github.com/" #base for all searches
search.user <- 'users/' #search for user
access <- '?access_token=259780c8151713b72726b60fd10a1bcdb8239987' #access token
user.search <- paste0(base, search.user, git.user) #search url
user.data <- fromJSON(user.search) #conduct search
user.repo.url <- user.data$repos_url #gets repo url
order.sort.page <- '?sort=created?order=desc?per_page=100' #orders, sorts and sets max number of pages
repo.search <- paste0(user.repo.url, order.sort.page, access) #combines all parts of url
repo.data <- fromJSON(repo.search)
flat.repo <- flatten(repo.data) #flattening the data
num_repos <- nrow(repo.data) #getting the number of rows (20), equal to the number of repos
most.popular <- flat.repo %>%
filter(forks_count == max(forks_count)) %>%
summarise(name = name) #gets the name in a data frame of the most popular
most_popular <- (most.popular[1,1]) #gets the name out of the data frame = 'initializr-template'
image <- user.data$avatar_url
num.pop.forks <- max(flat.repo$forks_count)
```
# `r git.user`
![](`r image` "`r git.user`")
#### `r git.user` has `r num_repos` repositories. Of those `r num_repos` repositories, `r most_popular` is their most popular. Their most popular repository, `r most_popular`, has had `r num.pop.forks` forks.
```{r, echo = FALSE, message=FALSE}
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = description, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
summary <- kable(summary.data)
```
`r table.data`
`r summary`
---
output: html_document
---
```{r, echo = FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
# Quereying Data
git.user <- 'vuejs' #finding the user verekia
base <- "https://api.github.com/" #base for all searches
search.user <- 'users/' #search for user
access <- '?access_token=259780c8151713b72726b60fd10a1bcdb8239987' #access token
user.search <- paste0(base, search.user, git.user) #search url
user.data <- fromJSON(user.search) #conduct search
user.repo.url <- user.data$repos_url #gets repo url
order.sort.page <- '?sort=created?order=desc?per_page=100' #orders, sorts and sets max number of pages
repo.search <- paste0(user.repo.url, order.sort.page, access) #combines all parts of url
repo.data <- fromJSON(repo.search)
flat.repo <- flatten(repo.data) #flattening the data
num_repos <- nrow(repo.data) #getting the number of rows (20), equal to the number of repos
most.popular <- flat.repo %>%
filter(forks_count == max(forks_count)) %>%
summarise(name = name) #gets the name in a data frame of the most popular
most_popular <- (most.popular[1,1]) #gets the name out of the data frame = 'initializr-template'
image <- user.data$avatar_url
num.pop.forks <- max(flat.repo$forks_count)
```
# `r git.user`
![](`r image` "`r git.user`")
#### `r git.user` has `r num_repos` repositories. Of those `r num_repos` repositories, `r most_popular` is their most popular. Their most popular repository, `r most_popular`, has had `r num.pop.forks` forks.
```{r, echo = FALSE, message=FALSE}
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = description, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
summary <- kable(summary.data)
```
`r table.data`
`r summary`
View(flat.repo)
View(add.dates)
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = description, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
summary <- kable(summary.data)
View(table.data.ugly)
table.data <- kable(table.data.ugly)
View(table.data.ugly)
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = substr(description, 1, 50), Language = language, Number_of_Forks = forks_count, Created = created)
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = (substr(description, 1, 30)), Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = description, Language = language, Number_of_Forks = forks_count, Created = created)
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
library(jsonlite)
library(dplyr)
# Quereying Data
git.user <- 'vuejs' #finding the user verekia
base <- "https://api.github.com/" #base for all searches
search.user <- 'users/' #search for user
access <- '?access_token=259780c8151713b72726b60fd10a1bcdb8239987' #access token
user.search <- paste0(base, search.user, git.user) #search url
user.data <- fromJSON(user.search) #conduct search
user.repo.url <- user.data$repos_url #gets repo url
order.sort.page <- '?sort=created?order=desc?per_page=100' #orders, sorts and sets max number of pages
repo.search <- paste0(user.repo.url, order.sort.page, access) #combines all parts of url
repo.data <- fromJSON(repo.search)
flat.repo <- flatten(repo.data) #flattening the data
num_repos <- nrow(repo.data) #getting the number of rows (20), equal to the number of repos
most.popular <- flat.repo %>%
filter(forks_count == max(forks_count)) %>%
summarise(name = name) #gets the name in a data frame of the most popular
most_popular <- (most.popular[1,1]) #gets the name out of the data frame = 'initializr-template'
image <- user.data$avatar_url
num.pop.forks <- max(flat.repo$forks_count)
pop.description <- flat.repo[name == most_popular, "description"]
View(flat.repo)
library(jsonlite)
library(dplyr)
# Quereying Data
git.user <- 'vuejs' #finding the user verekia
base <- "https://api.github.com/" #base for all searches
search.user <- 'users/' #search for user
access <- '?access_token=259780c8151713b72726b60fd10a1bcdb8239987' #access token
user.search <- paste0(base, search.user, git.user) #search url
user.data <- fromJSON(user.search) #conduct search
user.repo.url <- user.data$repos_url #gets repo url
order.sort.page <- '?sort=created?order=desc?per_page=100' #orders, sorts and sets max number of pages
repo.search <- paste0(user.repo.url, order.sort.page, access) #combines all parts of url
repo.data <- fromJSON(repo.search)
flat.repo <- flatten(repo.data) #flattening the data
num_repos <- nrow(repo.data) #getting the number of rows (20), equal to the number of repos
most.popular <- flat.repo %>%
filter(forks_count == max(forks_count)) %>%
summarise(name = name) #gets the name in a data frame of the most popular
most_popular <- (most.popular[1,1]) #gets the name out of the data frame = 'initializr-template'
image <- user.data$avatar_url
num.pop.forks <- max(flat.repo$forks_count)
pop.description <- flat.repo['name' == most_popular, "description"]
pop.description
pop.description <- flat.repo['name' = most_popular, "description"]
pop.description <- flat.repo[flat.repo$name == most_popular, flat.repo$description]
pop.description <- flat.repo[flat.repo$name == most_popular, flat.repo$description]
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
select(Name = name, Description = strtrim(description, 40), Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
mutate(short_description = strtrim(description, 40))
select(Name = name, Description = short_description, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
View(table.data.ugly)
table.data.ugly <- add.dates %>%
mutate(short_description = strtrim(description, 80))
select(Name = name, Description = short_description, Language = language, Number_of_Forks = forks_count, Created = created)
View(table.data.ugly)
table.data.ugly <- add.dates %>%
mutate(short_description = strtrim(description, 80))
select(Name = name, Description = description, Language = language, Number_of_Forks = forks_count, Created = created)
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
mutate(short_description = strtrim(description, 80)) %>%
select(Name = name, Description = short_description, Language = language, Number_of_Forks = forks_count, Created = created)
View(table.data.ugly)
library(knitr)
add.dates <- flat.repo %>%
mutate(created = as.Date(substr(created_at, 1, 10)))
table.data.ugly <- add.dates %>%
mutate(short_description = strtrim(description, 80)) %>%
select(Name = name, Description = short_description, Language = language, Number_of_Forks = forks_count, Created = created)
table.data <- kable(table.data.ugly)
summary.data <- flat.repo %>%
group_by(language) %>%
summarise(Number_of_Repositories = n(), Average_Forks = mean(forks_count))
summary <- kable(summary.data)
title: "firstGraph"
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(ggplot2)
library(maps)
library(dplyr)
library(tidyr)
library(RColorBrewer)
marches <- read.csv('marches.csv')
marches <- marches %>%
separate(location, c("City", "State"), ", ")
marches <- marches %>%
filter(State != "AK") %>%
filter(State != "HI") %>%
filter(State != "Maui")
marches <- marches %>%
filter(Latitude > 25) %>%
filter(mean.high.low != "") %>%
filter(mean.high.low != 0)
colnames(marches)[5] <- "People"
#load us map data
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill="white" )
p <- p + geom_point( data=marches, aes(x=Longitude, y=Latitude, size = People, color=People), aes(label=City)) + scale_size_continuous(range = c(2,20))
setwd("~/Documents/datavis/Scripts/UFO")
setwd("~/Documents/datavis")
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
View(drugUse)
View(ufoCoords)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(providers$Stamen.Toner)
install.packages("leaflet")
install.packages("leaflet")
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(providers$Stamen.Toner)
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012)
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 1)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 3)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -70, lat = 40, zoom = 3)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -65, lat = 40, zoom = 3)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -15, lat = 40, zoom = 3)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = 90, lat = 40, zoom = 3)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = City, label = paste("City: ", City, "/nShape: ", Shape))
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = paste(City), label = paste("City: ", City, "/nShape: ", Shape))
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City, label = paste("City: ", City, "/nShape: ", Shape))
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City, label = paste("City: ", ~City, "/nShape: ", ~Shape))
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City, label = paste("City: ", ~City, "/nShape: ", ~Shape))
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = paste("City: ", ~City, "/nShape: ", ~Shape))
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = (~City, ~State))
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = paste(~City, ~State))
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = paste(~City, ~State))
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions())
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>% addMarkers(
clusterOptions = markerClusterOptions()
) %>%
addMarkers(~lng, ~lat, popup = ~City)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions(freezeAtZoom = 5))
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords) %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(~lng, ~lat, popup = ~City)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions())
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions(), clusterId = 'cluster1')
m %>% addTiles()
# m %>% addProviderTiles(providers$CartoDB.DarkMatter)
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions())
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions())
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions())
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
m
library(dplyr)
library(leaflet)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3) %>%
addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City)
m %>% addTiles()
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
m
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords, ~lng, ~lat, popup = ~City) %>% setView(lng = -95, lat = 40, zoom = 3)
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet(data = ufoCoords, ~lng, ~lat, popup = ~City) %>% setView(lng = -95, lat = 40, zoom = 3))
drugUse <- read.csv("DrugUse.csv")
ufoCoords <- read.csv("UFOCoords.csv")
m <- leaflet() %>% setView(lng = -95, lat = 40, zoom = 3)
m %>% addTiles()
m %>% addMarkers(data = ufoCoords, ~lng, ~lat, popup = ~City, clusterOptions = markerClusterOptions())
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
m
library(dplyr)
library(leaflet)
